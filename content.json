{"meta":{"title":"rui的个人博客","subtitle":"","description":"个人学习记录博客","author":"rui576","url":"http://example.com","root":"/"},"pages":[{"title":"标签","date":"2021-05-31T08:32:14.000Z","updated":"2021-05-31T08:35:47.350Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-05-30T15:22:19.000Z","updated":"2021-05-31T08:36:24.420Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"微信小程序面试题","slug":"微信小程序面试题","date":"2021-06-06T12:22:42.000Z","updated":"2021-06-06T12:31:44.606Z","comments":true,"path":"2021/06/06/微信小程序面试题/","link":"","permalink":"http://example.com/2021/06/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"小程序面试题 小程序的优势 无需下载安装，直接使用，运行速度快，项目搭建迅速，短小精悍，每个app源代码不超过 2MB","text":"小程序面试题 小程序的优势 无需下载安装，直接使用，运行速度快，项目搭建迅速，短小精悍，每个app源代码不超过 2MB 小程序的页面构成（4个文件） index.js | index.json | index.wxml | index.wxss 小程序的生命周期 onLoad（option） 页面加载时触发，只会调用一次，可获取当前页面路径中的参数 onShow（） 页面显示 /切换前台时触发，一般用来发送数据请求 onReady（） 页面初次渲染完成时触发，只会调用一次，代表页面已经可以和视图层进行交互 onHide（） 页面隐藏 / 切入后台时触发，如底部tab切换到其他页面或小程序切入后台等 onUnload() 页面卸载时触发，如redirectTo或navigateBack 到其他界面 onPullDownRefresh（） 用户下拉时触发 onReachBottom（）用户上拉触底时触发 onshareTimeline（） 用户右上角点击转发 小程序如何请求数据 用request 如何提高小程序的首屏加载时间 提前请求：异步数据请求不需要等待页面渲染完成 利用缓存：利用storage API对异步请求数据进行缓存，二次启动时，先利用缓存数据渲染页面，再进行后台更新 避免白屏：先展示页面骨架和基础内容 及时反馈：及时的队需要用户等待交互操作给出反馈，避免用户以为小程序没有相应 性能优化：避免不当使用setData和onpagescroll Wxss与Css的区别 Wxss新增了尺寸单位rpx，提供了全新的全局样式和局部样式，Wxss仅支持部分Css选择器 小程序如何实现响应式 rpx 怎么优化小程序 提高页面加载速度 用户行为预测 减少默认的data的大小 组件化方案 自主获知自己的服务器 小程序如何显示用户头像与用户名 open-data 标签现在可以不用用户授权直接获取头像和用户名 请谈谈小程序的双向绑定和Vue的异同 Vue的双向绑定是通过数据拦截和观察者模式，通过this.value获取值，而小程序是通过触发表单元素绑定的方法，在js中用this.setData({ key:value})来取值 小程序中传参是怎么传的 在点击跳转的标签里，通过bindtap创建一个回调函数，且在标签中通过自定义属性绑定要传递的参数，拿到后，在跳转的API内的url后 +’’传递的参数’’，之后便可以在跳转到的页面里的onload声明周期里的option内拿到参数 小程序页面间有哪些传递数据的方法 使用全局变量实现数据传递 页面跳转或重定向时，使用url带参数传递数据 使用组件模板template传递参数 使用缓存传递参数 使用数据库传递参数 小程序数据请求的封装 12345678910111213141516171819202122232425262728293031323334353637//config.js// 配置服务器相关信息export default&#123; host:&#x27;http://localhost:3000&#x27;, // mobileHost:&#x27;http://huangxiaorui9527.cn.utools.club&#x27;&#125;//request.jsimport config from &#x27;./config&#x27;export default (url,data=&#123;&#125;,method=&quot;GET&quot;) =&gt;&#123; return new Promise((resolve,reject)=&gt;&#123; // 1.new Promise 初始化promise实例的状态为pending wx.request(&#123; url:config.host+url, data, method, header:&#123; cookie: wx.getStorageSync(&#x27;cookies&#x27;)?wx.getStorageSync(&#x27;cookies&#x27;).find(item =&gt; item.indexOf(&#x27;MUSIC_U&#x27;) !== -1):&#x27;&#x27; &#125;, success: (res) =&gt;&#123; if(data.isLogin)&#123; // 登录请求 将cookie存入本地 wx.setStorage(&#123; key: &#x27;cookies&#x27;, data: res.cookies &#125;) &#125; resolve(res.data);//修改Promise的状态为成功状态resolved &#125;, fail: (err) =&gt;&#123; console.log(&#x27;请求失败&#x27;); reject(err);//修改promise的状态为失败状态rejected &#125; &#125;) &#125;)&#125; 小程序页面跳转的方式 利用小程序的API跳转 wx.navigateTo({ url }) 保留当前页面，跳转到应用的某个页面，使用wx.navigateBack可以返回到原页面,且不能跳到tabbar页面 wx.navigateBack 返回上一级或多级页面，可通过getcurrentpages获取当前页面栈，决定需要返回几层 wx.redirectTo 关闭当前页面，跳转到应用内某个页面去，但不允许跳转到tabbar页面 wx.reLaunch 关闭所有页面，打开到应用内的某个界面 wx.switchTab 跳转到tabBar页面，并关闭其他所有非tabBar页面 利用小程序的组件跳转 navigator组件 利用open-type里的属性 naigate（默认）| redirect | switchTab | reLaunch 谈一谈小程序主要目录和文件的作用 project.config.json 项目配置文件，用得最多的就是配置是否开启https校验 App.js 设置一些全局的基础数据等 App.json 底部tab、标题栏和路由等设置 App.wxss 公共样式，引入iconfont等 pages 里面包含一个个具体的页面 index.json 配置当前页面标题和引入组件的等 index.wxss 页面样式表 index.wxml 页面结构 index.js 页面的逻辑，请求和数据处理等 谈谈wxml与标准的html的异同 都是用来描述页面的结构 都由标签和属性等构成 标签名字不一样，且小程序标签更少，单一标签更多 小程序多了一些wx：if这样的属性以及 { { } }这样的表达式 WXML仅能在微信小程序开发者工具中预览，而HTML可以在浏览器中预览 组件封装不痛，WXML对组件进行了重新封装 小程序在运行JS Core内，没有DOM树和window对象，小程序中无法使用window对象和document对象 简述小程序原理 小程序本质就是一个单页面应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原生的各种借口 它的架构是数据驱动的架构模式，它的UI和数据是分离的，所有的页面更新，都需要通过对数据的更改来实现 它从技术讲和现有的前端开发差不多，采用javascript、wxml、wxss三种技术进行开发 功能可分为webview和appService两个部分 webview可以用来展示UI，appService用来处理业务逻辑、数据及接口调用 两个部分在两个进程中运行，通过系统层JSBridge实现通信，实现UI的渲染、事件的处理等 小程序调用后台接口遇到哪些问题？ 数据大小限制，超过范围会直接导致整个小程序崩溃，除非重启小程序 小程序不可以直接渲染文章内容这类型的html文章，需要借助插件 （Tips：插件渲染会导致页面加载变慢，建议在后台对文章的内容的html进行过滤，后台直接处理批量替换p标签和div，然后其他的标签让插件来做） bindtap和catchtap的区别 bind事件绑定不会阻止冒泡事件向上冒泡 catch事件绑定可以阻止冒泡事件向上冒泡 小程序常见问题 rpx：小程序的尺寸单位，规定屏幕为750rpx，可适配不同分辨率的屏幕 本地资源无法通过wxss获取 wx.navigateTo无法打开页面是因为，一个应该只能打开五个页面，请避免多层级的交互方式或使用wx.redirectTo tabBar设置不显示是因为 tarBar中list的数量少于两项或超过五项 tabBar写法错误导致 tabBar没有写pagePath字段（程序启动后的第一个页面）","categories":[{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"Javascript面试题","slug":"Javascript面试题","date":"2021-06-06T08:50:31.000Z","updated":"2021-06-06T08:51:41.849Z","comments":true,"path":"2021/06/06/Javascript面试题/","link":"","permalink":"http://example.com/2021/06/06/Javascript%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"Javascript面试题 Js数据类型有哪些？ 字符串 String 数值 Number 布尔 Boolean 空值 Null 未定义 Undefined 对象 Object （Tips：除了Object为引用数据类型，其余全为基本数据类型）","text":"Javascript面试题 Js数据类型有哪些？ 字符串 String 数值 Number 布尔 Boolean 空值 Null 未定义 Undefined 对象 Object （Tips：除了Object为引用数据类型，其余全为基本数据类型） Js中Null与Undefined的区别 相同点：用if判断时，两者都会被转换成false 不同点： number转化的值不同，number（Null）转化为0，number（undefined）转化为NaN Null代表一个只被定义了，但这个值是空值 | Undefined表示变量声明了但未赋值 闭包是什么？有什么特性？对页面会有什么影响 通俗理解，一个外部函数包裹着一个内部函数，内部函数里引用了外部函数的数据，且外部函数被执行，就会产生闭包。 特点：函数嵌套函数 | 函数内部可以引用外部的参数和变量 | 被引用的参数和变量不会被垃圾回收机制回收 优点：变量长期驻扎在内存中 | 避免全局变量的污染 | 私有成员的存在 缺点：会造成内存泄漏（应该被清除的数据 还停留在内存中） Js中常见的内存泄漏： 意外的全局变量 被遗忘的计时器或回调函数 脱离DOM的引用 闭包 事件委托 事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件 事件委托，称事件代理，是js中很常用的绑定事件的技巧，事件委托就是把原本需要绑定在子元素的响应事件委托给父元素，让父元素担当监听的植物，事件委托的原理就是DOM元素的事件冒泡。 Event.target 谁调用谁就是事件源 什么是事件冒泡？ 一个事件触发后，会在子元素和父元素之间传播，这种传播分为三个阶段 捕获阶段：从Windows对象传导到目标节点（从外到里），这个阶段不会响应任何事件 目标阶段：在目标节点上触发 冒泡阶段：从目标节点传导会window对象（从里到外） Tips:事件委托/事件代理就是利用事件的冒泡机制把里层需要响应的事件绑定到外层。 本地存储于cookie的区别 由于cookie不太行，有着大小限制（4k左右），所以H5新增两个存储 localstorage | sessionstorage cookie：跟踪用户信息，小跟屁虫，一般记录用户密码，浏览器已关闭，就没了 loalstorage：永久存储，只要不删除，就会一直存储在浏览器中 sessionstorage：临时存储，当前窗口打开时有效，当前窗口关闭数据就没了。 ES6新特性 const和let、模板字符串、模板字符串、箭头函数、函数的参数默认值、对象和数组的结构、for…of和for…in、ES6中的类 Let、Var、Const的区别 Var声明的变量会挂在在Window上，且它的变量存在变量提升，同一作用域下Var可以声明同名变量，以上let和const都不可以 Let声明会形成块级作用域，let暂存死区 const声明也会形成块级作用域，且一旦声明必须赋值，不能用null占位，声明后不能再修改，如果声明的是复合类型数据，可以修改属性 数组的方法有哪些？ push（） 从后面添加元素，返回值为添加完后的数据的长度 arr.pop() 从后面删除元素，只能是一个，返回值是删除的元素 arr.shift（）从前面删除元素，只能删除一个，返回值是删除的元素 arr.unshift（） 从前面添加元素，返回值是添加完后的数组的长度 arr.splice(i,n) 删除从i开始的那个元素，n是删除的个数。返回值是删除的元素 arr.concat() 连接两个数组，返回值为连接后的新数组 str.split() 将字符串转化为数组 arr.sort() 将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序，不是按照数字大小进行排序的 arr.reverse() 将数字反转，返回值是反转后的数组 arr.slice(start,end) 切去索引值start到索引值end的数组，不包含end索引的值，返回值是切出来的数组 arr.forEach(callback) 遍历数组，无return，即使有return，也不会返回任何值，并且会影响原来的数组 arr.map(callback) 映射数组（遍历数组），有return返回一个新数组 arr.filter(callback) 过滤数组，返回一个满足要求的数组 什么是面向对象 面向对象是一种思想，是基于面向过程而言的，就是说面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节；这种思想是将数据作为第一位，这是对数据的一种优化，操作起来更加方便，简化了过程。 Js本身没有class类型的，但是每个函数都有一个prototype属性，prototype指向一个对象，当函数作为构造函数时，prototype就起到类似于class的作用 面向对象有三个特点 封装：隐藏对象的属性和实现细节，对外提供公共访问方式 继承：提高代码的复用性，继承是多态的前提 多态：是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象 普通函数和构造函数的区别 构造函数也是一个普通函数，创建方式和普通函数一样，但是构造函数习惯上首字母大写 调用方式不一样，普通函数直接调用，构造函数要用关键字new来调用 调用时，构造函数内部会创建一个新对象，也就是实例，而普通函数不会创建新对象 构造函数的内部this指向实例，普通函数的内部this指向调用函数的对象（没有对象调用，默认为window） 构造函数默认的返回值是创建的对象，普通函数的返回值是由return语句决定的 构造函数的函数名与类名相同 原型、原型链、原型继承 原型：任何一个对象实例都有一个原型，也叫做原型对象，这个原型对象由对象的内置属性 proto 指向它的构造函数的prottype指向的对象，即任何对象都是有一个构造函数创建的，但不是每一个对象都有prototype，只有方法才有prototype 原型链：原型链的基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。 原型链的核心就是依赖对象的 proto 的指向,当需要自身不存在的属性时，就一层层的扒出创建对象的构造函数，知道Object，就没有 proto 指向了。因为 proto实质找的是prototype，所以我们只要找到这个链条上的构造函数的prototype。其中Object.prototype是没有 proto 属性的，它 ==null 原型继承：理由原型中的成员可以被和其相关的对象共享这一特性，可以实现继承，这种实现继承的方式，就叫做原型继承 Promise的理解 什么是Promise？ Promise是一种解决异步编程的方案，相比回调函数和事件更合理更强大，从语法上讲，promise是一个对象，从它可以获取异步操作的消息 Promise有三种状态 pending 初识状态（等待状态） fulfiled 成功状态 rejected 失败状态 promise的两个特点 promise对象的状态不受外界影响 promise的状态一旦改变就不会再变，任何时候都可以得到这个结果，状态不可逆 promise的三个缺点 无法取消Promise，一旦新建它就会立即执行，无法中途取消 如果不设置回调函数，Promise内部抛出的错误，不会反映到外部 当处于pending状态时，无法得知目前进展到了哪一个节点，是刚刚开始还是即将完成 我们用Promise来解决什么问题 回调地狱：代码难以维护，常常第一个函数的输出是第二个函数的输入这种现象 Promise支持多并发请求，获取并发请求中的数据 Promise可以解决异步的问题，本身不能说Promise是异步的 async的用法 async就是generation和promise的语法糖，async就是将generator的*换成了async，将yiled换成了await 函数前必须加一个async，异步操作方法前加一个await关键字，意思就是等一下，执行完了再走（Tips：await只能在async函数中运行，否则会报错） 一个页面从输入Url到页面加载显示完成，这个过程中都发生了什么 当发送一个URl请求时，不管URL是Web页面的URL还是Web页面上每个资源的URL，浏览器都会开启一个线程来处理这个请求，同时在远程DNS服务器上启动一个DNS查询。这能使浏览器获得请求对应的IP地址。（开启线程，启动DNS，以便获取IP） 浏览器与远程Web服务器通过TCP三次握手来建立一个TCP | IP 连接。该握手包括一个同步保温，一个同步-应答报文和一个应答报文，这三个报文在浏览器和服务器之间传递。该握手首先由客户端建立起通信，然后服务端响应并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。 一旦TCP / IP 连接建立，浏览器会通过该连接会向远程服务器发送HTTP的GET请求。远程服务器找到资源并使用HTTP响应返回该资源 此时Web服务器提供资源服务，客户端开始下载资源 get和post请求在缓存方面的区别 get 请求类似于查找的过程，用户获取数据，可以不用每次都与数据库连接，所以可以使用缓存 post不同，post做的一般是修改和删除的工作，所以必须与数据库交互，所以不能使用缓存 因此get请求适合于请求缓存 JS的语言特性 运行在客户端的浏览器上 不用预编译，直接解析执行代码 是弱类型语言，较为灵活 与操作系统无关，跨平台的语言 脚本语言、解释性语言 js的new操作符做了哪些事情 new操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数之后返回这个对象 改变函数内部this指针指向函数（bind，apply，call的区别） 通过apply和call改变函数的this指向，他们两个函数的第一参数都是表示要改变指向的那个对象，第二个参数apply是数组，而call则是arg1，arg2…这种形式。而通过bind改变this作用域会返回一个新的作用域，这个函数不会马上执行 js拖拽功能的实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;script type=&quot;text/javascript&quot;&gt; window.onload = function () &#123; /* -可以拖拽box1元素 -拖拽流程 1.当鼠标在拖拽元素上按下时，开始拖拽 onmousedown 2.当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove 3.当鼠标松开时，被拖拽元素固定在当前 onmouseup */ // 获取box1 var box1=document.getElementById(&quot;box1&quot;); // 为box1绑定一个鼠标按下事件 box1.onmousedown=function(on)&#123; on=on||window.on; // 求出div水平偏移量Left 鼠标.clentX-元素.offsetLeft // 求出div垂直偏移量Top 鼠标.clentY-元素.offsettop var Left=on.clientX-box1.offsetLeft; var Top=on.clientY-box1.offsetTop; //为document绑定一个onmousemove事件 document.onmousemove=function(event)&#123; // 当鼠标移动时被拖拽元素跟随鼠标移动 onmousemove 需要获取鼠标坐标 event=event||window.event; // 获取鼠标坐标 var left=event.clientX-Left; var top=event.clientY-Top; // 修改box1位置 box1.style.left=left+&quot;px&quot;; box1.style.top=top+&quot;px&quot;; &#125;; document.onmouseup=function()&#123; // 取消onmousemove事件 document.onmousemove=null; // 取消自己 可以当这个操作变成一次性事件 document.onmouseup=null; &#125;; /* -当我们拖拽一个网页内容时，浏览器会默认去搜索引擎中搜索内容 -此时会导致 拖拽功能异常，这个是浏览器提供的默认行为 如果不希望发生这个行为 则可以通过return false来取消默认行为 但是对IE8不起作用 */ return false; &#125;; &#125;; &lt;/script&gt;","categories":[{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"}]},{"title":"HTML与CSS面试题","slug":"HTML与CSS面试题","date":"2021-06-05T13:32:51.000Z","updated":"2021-06-05T13:37:15.518Z","comments":true,"path":"2021/06/05/HTML与CSS面试题/","link":"","permalink":"http://example.com/2021/06/05/HTML%E4%B8%8ECSS%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"HTML+CSS面试题 介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同 标准盒子模型： 宽度=content+border+padding+margin 低版本的盒子模型：宽度= 内容宽度（content+border+padding）+margin","text":"HTML+CSS面试题 介绍一下标准的CSS的盒子模型？与低版本IE的盒子模型有什么不同 标准盒子模型： 宽度=content+border+padding+margin 低版本的盒子模型：宽度= 内容宽度（content+border+padding）+margin CSS哪些属性可以被继承 | 哪些属性不可以被继承 font-size、font-family、color | border、padding、margin、width、height 样式权重 （权重相同，则选择最后出现的样式） !important（10000）&gt;内联样式（1000）&gt;id选择器（100）&gt;类、伪类选择器（10）&gt;标签择器（1） （Tips：继承得到的样式的优先级最低） 如何居中div？如何居中一个浮动元素？如何让绝对定位的div居中？ 1234567891011121314//div:margin: 0 auto;//浮动元素position: absolute;left: 50%;top: 50%;margin: -50px 0 0 -100px;//绝对定位divposition: absolute;margin: 0 auto;left: 0;right: 0; display有哪些值？说明他们的作用？ inline（默认） –内联 none –隐藏 block –块 table –表格 list-item –项目列表 line-block –行内块 CSS3新特性 解释CSS3的flexbox（弹性盒子布局模型），以及适用场景？ 该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。 在传统的布局方式中，block布局在垂直方向从上到下依次排列；inline布局 则是在水平方向来排列；而弹性盒子布局没有这样内在的方向限制，由开发人员自由操作 适用场景：移动前端开发，在Android和ios上也完美支持。 用纯CSS创建一个三角形 12345678width: 0;height: 0;border-top: 40px solid transparent;border-left: 40px solid transparent;border-right: 40px solid transparent;border-bottom: 40px solid #ff0000;//transparent 使其透明 为什么要初始化CSS样式？ 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。 absolute的containing block（包含块）计算方式跟正常流有什么不同？ 无论哪种，都要先找到其祖先元素最近的position值不为static的元素再判断： 1.若此元素为inline元素，则containing block为 能包含这个元素生成的第一个和最后一个inline box 的padding box 的最小矩形。 2.否则，由这个祖先元素的 padding box 构成，如果都找不到，则为initial containing block。 （Tips：1.static / relative:就是父元素的content box ​ 2.fixed：它的containing block 为当前的可视化窗口 ） CSS中的visibility属性中有个collapse属性值，在不同浏览器下有什么区别？ 当一个元素的visibility属性被设置成collapse后，对于一般的元素，表现和hidden一样 区别： ​ 1.chrome中，使用collapse值和使用hidden没有区别 ​ 2.firefix，opera和IE，使用collapse值和使用display：none没有区别 display：none与visibility：hidden的区别？ 前者不显示对应元素，文档布局中不再分配空间 | 后者隐藏对应元素，文档布局仍保留原来的空间。 BFC规范的理解 为什么会出现浮动和什么时候要清除浮动？清除浮动的方式？ 浮动元素，会脱离文档流，漂浮在文档流的块框上 浮动带来的问题： 父元素高度无法被撑开，影响与父元素同层级元素 与浮动元素同级的非浮动元素会跟随其后 如果不是第一个元素浮动，将会影响页面显示的结构 CSS优化、提高性能的方法有哪些？ 避免过度约束 避免后代选择器 避免链式选择器 使用紧凑语法 避免不必要的命名空间 避免不必要的重复 最好使用表示语义的名字，一个好的类名应该是描述他是什么而不是像什么 避免！important，可以选择其他选择器 尽可能的精简规划，可以合并不同类里的合并规则 浏览器是怎么样解析CSS选择器的？ CSS选择器的解析是从右向左解析的。因为从左向右解析发现错误需要进行回溯，会损失很多性能，若从右向左，可以在第一步就筛选掉大量不符合条件的最右节点。 CSS解析完毕后，需要将解析的结果和DOM树的内容一起分析建立成一颗Render树，最终用来进行绘图。 在网页中应该使用奇数还是偶数字体？ 使用偶数字体，因为偶数字号相对更容易和web设计的其他部分构成比例关系。有的字体开始只提供了12、14、16px这三个大小的点阵，而13、15、17px时，用的是小一号的点，但是点阵没变，于是略显稀疏。 什么是响应式布局？响应式布局设计的基本原理是什么？ 响应式网站设计是一个网站能兼容多个终端，而不是每一个终端做一个特定的版本。 基本原理是通过媒体查询检测不同的设备尺寸做处理。 兼容IE的话 页面的头部必须有meta声明的viewport ::before和::after中双冒号和单冒号有什么区别？ 单冒号用于CSS3伪类，双冒号用于CSS3伪元素。 ：before和：after两个伪元素，是在CSS2.1里新出现的。起初伪元素的前缀使用的是单冒号语法，但随着Web进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号。 你对line-height是如何理解的 行高是指一行文字的高度，具体说是两行文字间基线的距离 多行文本垂直居中，需要设置display属性为inline-block 如果需要手动画动画，你认为最小时间间隔是多少？ 多数显示屏默认频率是60Hz，理论间隙最小位1/60*1000ms=16.7ms display:inline-block什么时候会显示间隙？ 有空格时候会有间隙 解决：移除空格 margin正值的时候 解决：margin使用负值 png、jpg、gif图片格式解释，分别什么时候用，以及webp png是便携式网络图片，是一种无损数据压缩的格式，优点是：压缩比搞，色彩好，大多数情况可以用 jpg是一个针对照片使用的一种失真压缩方法，是一个破坏性压缩，在www上，被用来存储和传输照片的格式 gif是一个位图文件格式，以8为色重现真色彩的图像，可以实现动画效果 webp格式是谷歌在2010年推出的，压缩略只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久了，兼容性不好。 style标签写在body后与body前有什么区别? 页面加载自上而下，写在body标签后，由于浏览器以逐行方式对HTML文档进行解析，当解析到写在尾部的样式表，会导致浏览器停止之前的渲染，等待加载且解析样式表完成后重新渲染，在windows的IE下可能会出现页面闪烁的情况。 CSS的overflow属性定义移除内容区的内容会如何处理？ 参数：scroll | 出现滚动条 参数：auto | 子元素内容大于父元素时出现滚动条 参数：visible | 溢出的内容出现在父元素之外 参数：hidden | 溢出隐藏 阐述一下CSS Sprites 小精灵图，讲一个页面涉及到的所有图片都包含到一个大图中去，然后利用CSS中的background组合属性进行背景定位，利用CSS Sprites能很好的减少网页的http请求，从而大大的提高页面的性能；减少图片的字节。 DOM加载的流程 解析HTML结构 加载外部脚本和样式表 解析并执行脚本代码 DOM树建立完成 加载图片等外部文件 页面加载完毕 px、rem、rm px：px说我是固定的，不会变通 em/rem：我们是相对长度，页面布局变我们就变，响应式布局最喜欢我们了 px特性：IE无法调整使用px作为单位的字体大小 | 国内大部分使用的IE内核，FireFix能调整px、rem、em | px是相对屏幕分辨率而言的 em特性：可以继承父级元素的文字大小且em的值不固定 rem特性：集相对大小与绝对大小的优点于一身，既可以修改根元素比例来调整字体，也可以避免字体大小逐层符合的连锁。 （Tips：不支持rem的浏览器，可以多写一个绝对单位声明，浏览器会自动忽视rem设定的字体大小） link与@import的区别 从属关系的区别： @import是CSS提供的语法规则，只有导入CSS样式表的功能 link是HTML提供的标签，不仅加载CSS，还可以定义RSS、rel、连接属性等 加载顺序的区别： 加载页面时，link引入的CSS同时被加载 | @import引入的CSS在页面加载完后加载 兼容性区别： @import在CSS2.1才有，IE5+才能识别；link属于HTML标签，不存在兼容问题 DOM可操作性区别： DOM可以通过js操作link来改变样式，但是DOM是基于文档的，无法通过@import改变样式 权重区别 ​ link &gt; @import 的样式","categories":[{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"}],"tags":[{"name":"HTML、CSS","slug":"HTML、CSS","permalink":"http://example.com/tags/HTML%E3%80%81CSS/"}]},{"title":"身体原因休息一天，明后两天刷面经","slug":"身体原因休息一天，明后两天刷面经","date":"2021-06-04T13:08:15.000Z","updated":"2021-06-04T13:08:15.366Z","comments":true,"path":"2021/06/04/身体原因休息一天，明后两天刷面经/","link":"","permalink":"http://example.com/2021/06/04/%E8%BA%AB%E4%BD%93%E5%8E%9F%E5%9B%A0%E4%BC%91%E6%81%AF%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%98%8E%E5%90%8E%E4%B8%A4%E5%A4%A9%E5%88%B7%E9%9D%A2%E7%BB%8F/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CSS3第二天（背景、颜色、渐变、盒模型）","slug":"CSS3第二天（背景、颜色、渐变、盒模型）","date":"2021-06-03T12:48:43.000Z","updated":"2021-06-03T12:50:18.173Z","comments":true,"path":"2021/06/03/CSS3第二天（背景、颜色、渐变、盒模型）/","link":"","permalink":"http://example.com/2021/06/03/CSS3%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%88%E8%83%8C%E6%99%AF%E3%80%81%E9%A2%9C%E8%89%B2%E3%80%81%E6%B8%90%E5%8F%98%E3%80%81%E7%9B%92%E6%A8%A1%E5%9E%8B%EF%BC%89/","excerpt":"CSS3背景 -1.多重背景 语法：background：背景色（1） 背景图片（1） 平铺方式（1） 位置（1），背景色（2）…..","text":"CSS3背景 -1.多重背景 语法：background：背景色（1） 背景图片（1） 平铺方式（1） 位置（1），背景色（2）….. -2.background-size 设定背景图像的尺寸 语法： background-size ：length | precentage | cover | contain 属性值： length：设置背景图像的高度和宽度，第一个值设置宽度，第二个设置高度，如果只设置一个值，那么第二个值会被设置为 auto percentage：以父元素的百分比来设置背景图像的高度和宽度，用法和length一样 cover：把背景图像扩展至足够大，已使背景图像完全覆盖背景区域。背景图像的某部分也许无法显示在背景定位区域中。 contain：把图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域 -3.backgronnd-origin 属性指定了背景图像的位置区域 语法： background-origin ：padding-box（背景图像相对于内边框来定位） | border-box （相对于边框盒） | content-box （相对于内容框） -4.background-clip 设定背景的绘制区域 语法：background-clip：padding-box（背景图像相对于内边框来定位） | border-box （相对于边框盒） | content-box （相对于内容框） CSS3颜色-1.rgba（r，g，b，a） 属性值： r：红色 取值范围：0-255 g: 绿色 取值范围：0-255 b: 蓝色 取值范围：0-255 a: 不透明度 取值范围：0-1的一个小数 2.HSL （h，s，l） 属性值： h：色调 取值范围：0-360 s：饱和度 取值范围：0-360 l：亮度 取值范围：0-100% 3.HSLA （h，s，l，a） 属性值： h：色调 取值范围：0-360 s：饱和度 取值范围：0-360 l：亮度 取值范围：0-100% a：不透明度 取值范围：0-1的一个小数 -4.Opacity 设置元素的不透明级别 大多数请况下用于做元素的遮罩效果 语法： opacity：value | inherit 取值： value：规定不透明度。从0.0（完全透明）到1.0（完全不透明）。 inherit：从父元素继承opacity属性的值 Tips：IE8及8以下的版本不支持opacity。兼容方式为：再添加一行代码来处理不兼容。 代码：filter：alpha（opacity = 数值） 数值的范围：0-100 CSS3渐变 主要用来设置背景或制作三维图 -1.线性渐变 语法： background：linear-gradient（direction（方向或角度），color-stop1，color-stop2，…..）; -2.径向渐变 语法：background：radial-gradient（shape，size，center，start-color，….. ，last-color）; 属性： shape ：形状 ellipse（椭圆 默认）| circle（圆） size：渐变大小 farthest-corner：渐变的半径长度为从圆心到离圆心最远的角（默认） closest-side：渐变的半径长度为从圆心到离圆心最近的边 closest-corner：渐变的半径长度为从圆心到离圆心最近的角 farthest-side：渐变的半径长度为从圆心到离圆心最远的边 center：位置 center：设置圆心在中心位置 top：设置圆心在顶部位置 bottom：设置圆心在底部位置 at 圆心横坐标 圆心纵坐标 ：设定圆心的位置在一个指定位置上 start-color：初始颜色 last-color： 结束颜色 -3.文字渐变 语法：background-image：线性渐变或径向渐变； ​ background-clip：text； ​ text-fill-color：transparent； CSS3盒模型 -1.box-sizing 允许你以某种方式定义某些元素，以适应指定的区域。 语法：box-sizing：content-box / border-box / inherit（火狐和谷歌低版本需要厂商前缀） 属性： content-box：实际宽高为内容+边框+内边距 border-box：内容包括内边距和外边框 inherit：从父元素继承box-sizing的值","categories":[],"tags":[{"name":"背景 颜色 渐变 盒模型","slug":"背景-颜色-渐变-盒模型","permalink":"http://example.com/tags/%E8%83%8C%E6%99%AF-%E9%A2%9C%E8%89%B2-%E6%B8%90%E5%8F%98-%E7%9B%92%E6%A8%A1%E5%9E%8B/"}]},{"title":"CSS3第二天（文本、边框）","slug":"CSS3第二天（文本、边框）","date":"2021-06-03T12:48:22.000Z","updated":"2021-06-03T12:49:33.968Z","comments":true,"path":"2021/06/03/CSS3第二天（文本、边框）/","link":"","permalink":"http://example.com/2021/06/03/CSS3%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%88%E6%96%87%E6%9C%AC%E3%80%81%E8%BE%B9%E6%A1%86%EF%BC%89/","excerpt":"CSS3文本 -1.文本阴影 ​ 语法：text-shadow：h-shadow v-shadow blur color ​ 属性值： h-shadow{number} ：必需 水平阴影的位置 允许负值 v-shadow{number} ：必需 垂直阴影的位置 允许负值 blur{number} ：可选 模糊的距离 color{color} ：可选 阴影的位置","text":"CSS3文本 -1.文本阴影 ​ 语法：text-shadow：h-shadow v-shadow blur color ​ 属性值： h-shadow{number} ：必需 水平阴影的位置 允许负值 v-shadow{number} ：必需 垂直阴影的位置 允许负值 blur{number} ：可选 模糊的距离 color{color} ：可选 阴影的位置 2.文本自动换行 ​ 语法：word-wrap：normal | break-word ​ 属性值： normal ：只在有符号断开的地方换行 （默认） break-word ：在规定的长度下直接换行 -3.单词拆分 ​ 语法：word-break：normal | break-all | keep-all ​ 属性值： normal ：使用浏览器的默认的换行规则 break-all ：允许在单词内进行换行 keep-all ：只能在半角空格或连字符处换行 -4.文本溢出 （重要） 单行文本溢出：text-overflow: clip（修剪文本） | ellipsis（显示省略号来代替被修剪的文本） | string （使用给定的字符串来代表被修剪的文本） 多行文本溢出：(IE9以下的版本不支持，主要是谷歌支持) ​ display： -webkit-box ​ -webkit-box-orient：vertical ​ -webkit-line-clamp：行数 ​ overflow：hidden； CSS3边框 -1.圆角边框 语法：border-radius: 1-4 length | % / 1-4 length | % （次序：左上 右上 右下 左下 ，也是顺时针） 四个方位的词：top-left | top-right | bottom-left | bottom-right -2.边框阴影 语法：box-shadow：h-shadow v-shadow blur spread（阴影尺寸） color inset（将外部阴影改为内部阴影） -3.边框图片 语法：border-image：source slice width outset repeat 属性值： source ：图片路径 silce ：图片边框向内偏移量 width：图片边框宽度 outset：边框图像区域超出边框的量 repeat：图像边框是否应平铺（repeat）、铺满（round）、或拉伸（stretch）","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://example.com/categories/CSS3/"}],"tags":[{"name":"文本 边框","slug":"文本-边框","permalink":"http://example.com/tags/%E6%96%87%E6%9C%AC-%E8%BE%B9%E6%A1%86/"}]},{"title":"CSS3第一天(新特性与选择器)","slug":"CSS3第一天-新特性与选择器","date":"2021-06-02T13:58:20.000Z","updated":"2021-06-02T14:04:40.204Z","comments":true,"path":"2021/06/02/CSS3第一天-新特性与选择器/","link":"","permalink":"http://example.com/2021/06/02/CSS3%E7%AC%AC%E4%B8%80%E5%A4%A9-%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%8E%E9%80%89%E6%8B%A9%E5%99%A8/","excerpt":"CSS3新特性学习-css3是css2.1的一个升级版，它是对CSS的一个扩展。","text":"CSS3新特性学习-css3是css2.1的一个升级版，它是对CSS的一个扩展。 CSS3新特性-选择器 -阴影 -形状转换（2D&lt;-&gt;3D） -变形 -动画 -边框 -多重背景 -反射 -文字 -颜色（rgba/hsl/hsla） -滤镜（fitter） -弹性布局 -多列布局 -盒模型 -Web字体 -媒体查询 厂商前缀-CSS3不是浏览器或同一浏览器的不同版本都支持，所以需要兼容，通常做法是加厂商前缀 -1.主流浏览器内核 a）Trident：IE内核 b）WebKit：Chome和Safair内核 c）Gecko：FireFox内核 d）Blink（Webkit一个分支）：Chrome和Opera内核 Tips：目前国内的浏览器大多都是双核的（IE内核+Chrome内核） -2.厂商前缀 IE：-ms- Chrome&amp;Safari: -webKit- FireFox: -moz- Opera: -o- CSS3选择器丰富选择的目的是为了减少class和id属性的使用 -1.属性选择器 -2.结构性伪类 1)：root 匹配html标签，与body选择器效果一样 2)：子元素选择 ​ -匹配父元素连续的子元素 :first-child | :last-child | :nth-last-child(n) | :nth-child(n) :only-child 查找父元素中仅有一个子元素 :only-of-type 查找父元素中仅有一个兄弟元素 :empty 查找没有元素（包含文本元素） ，即查找空元素 -3.目标伪类 :target 匹配URL指向的元素 -4.UI元素（表单元素）状态伪类 :enabled 匹配form中 含有enabled属性的元素 :disabled 匹配form中 不含有enabled属性的元素 :checked 匹配form中处于选中状态的元素（Tips：只在Opera中生效） :selection 匹配被用户选中的部分 -5.否定伪类 :not 匹配所有不匹配前面简单选择器的元素 -6.通用兄弟元素选择器 a~b 匹配a元素之后的b元素","categories":[{"name":"CSS3","slug":"CSS3","permalink":"http://example.com/categories/CSS3/"}],"tags":[{"name":"新特性","slug":"新特性","permalink":"http://example.com/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"}]},{"title":"HTML5（新增属性和组件）","slug":"HTML5（新增属性和组件）","date":"2021-06-02T11:24:30.000Z","updated":"2021-06-06T08:32:00.130Z","comments":true,"path":"2021/06/02/HTML5（新增属性和组件）/","link":"","permalink":"http://example.com/2021/06/02/HTML5%EF%BC%88%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7%E5%92%8C%E7%BB%84%E4%BB%B6%EF%BC%89/","excerpt":"HTML5新增常用属性 -contentEditable 将标签转换为可编辑状态，可用于所有标签。默认值为false -hidden 对元素进行隐藏，一般用于传值或当某给条件成立时，执行内容显示","text":"HTML5新增常用属性 -contentEditable 将标签转换为可编辑状态，可用于所有标签。默认值为false -hidden 对元素进行隐藏，一般用于传值或当某给条件成立时，执行内容显示 -data-* 用于存储页面或应用程序的私有自定义数据，一般用于传值。 -multiple 规定输入域中可选择多个内容，用于表单组件，如file/select。 -required 约束表单元素在提交前必须输入值，用于表单组件中，需要结合提交按钮使用。 -pattern 用于验证字段的模式，用于表单组件，需要结合提交按钮使用。 HTML5部分新表单组件 input type=“组件名” -color 颜色 -email 邮箱 -tel 电话号码 -url 网址 -number 数字 -range 范围 -search 搜索 -date 日期 -datetime 日期时间 -datatime-local 本地日期时间 -year 年份 -month 月份 -time 时间 HTML5表单属性 -formaction 修改action数据提交的地方 -formenctype 修改表单请求的类型 -formmethod 修改数据提交的方法 ​ 常见的提交方式有get（默认）和post两种，他们的区别是： get以字节为单位提交，只接受ASCLL， 而post以字符为单位提交 get是明文方式，提交的数据会显示在地址栏中，一般不用来传输一些敏感的数据，而post是以暗文方式提交 get在浏览器中回退是无害的，而post会再次发送请求 get会被浏览器主动缓存，而post不会，除非手动设置 get和post在输出字节数上一般没有限制，个别浏览器有，可以理解get一般不超过2k，而post一般不超过2M -form 设置表单元素属于哪个表单 -novalidate 不验证 input属性 -autocomplete 自动完成 ​ 用来帮助用户输入，每一次输入的内容，浏览器是否保存输入的值，以备将来使用 ​ 属性值 on（默认）|off ​ 为了保护敏感数据，避免本地浏览器对他们不安全存储，一般需要关闭 -autofocus 自动获取焦点 -step 步长 -multiple 多选 -pattern 正则匹配 -placeholder 输入提示 -required 必须输入","categories":[{"name":"HTML5","slug":"HTML5","permalink":"http://example.com/categories/HTML5/"}],"tags":[]},{"title":"HTML5（多媒体与画布）","slug":"HTML5（多媒体与画布）","date":"2021-06-02T11:24:12.000Z","updated":"2021-06-02T11:27:00.528Z","comments":true,"path":"2021/06/02/HTML5（多媒体与画布）/","link":"","permalink":"http://example.com/2021/06/02/HTML5%EF%BC%88%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8E%E7%94%BB%E5%B8%83%EF%BC%89/","excerpt":"audio 播放音乐或音频，IE9以下不支持 支持的格式：.mp3/.ogg/.wav","text":"audio 播放音乐或音频，IE9以下不支持 支持的格式：.mp3/.ogg/.wav 属性： ​ -src 文件路径 ​ -autplay 自动播放 ​ -loop 循环 ​ -controls 控制条 ​ -muted 静音 ​ -preload 预加载 （当使用autplay时 ，preload自动失效） -video 加载视频 IE9以下不支持​ 支持的格式：.mp4/.ogg/.WemB 属性： ​ -src 文件路径 ​ -autplay 自动播放 ​ -loop 循环 ​ -controls 控制条 ​ -muted 静音 ​ -preload 预加载 （当使用autplay时 ，preload自动失效） ​ -width 宽度 ​ -height 高度 ​ -poster 海报 embed 嵌入内容或加载插件 属性： ​ -src 文件路径 ​ -width 宽度 ​ -height 高度 ​ -type 类型 ​ canvas 画布 是一个容器元素 注意： ​ -单独使用canvas没有什么意义，它必须结合Javascript使用 ​ -canvas的宽高最好不要通过CSS实现，而是直接使用标签属性width和height实现","categories":[{"name":"HTML5","slug":"HTML5","permalink":"http://example.com/categories/HTML5/"}],"tags":[{"name":"多媒体与画布","slug":"多媒体与画布","permalink":"http://example.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8E%E7%94%BB%E5%B8%83/"}]},{"title":"HTML5（初识）","slug":"HTML5（初识）","date":"2021-06-02T11:23:49.000Z","updated":"2021-06-02T11:36:54.674Z","comments":true,"path":"2021/06/02/HTML5（初识）/","link":"","permalink":"http://example.com/2021/06/02/HTML5%EF%BC%88%E5%88%9D%E8%AF%86%EF%BC%89/","excerpt":"HTML5新特性 -增加了audio与video音频播放，抛弃了Flash -新增了canvas画布（绘画，制作动画、如小游戏开发等） -地理定位 -增加了离线缓存 -硬件加速 -Web Socket（全双工通信） -增加本地存储 -新增一些语义化标签","text":"HTML5新特性 -增加了audio与video音频播放，抛弃了Flash -新增了canvas画布（绘画，制作动画、如小游戏开发等） -地理定位 -增加了离线缓存 -硬件加速 -Web Socket（全双工通信） -增加本地存储 -新增一些语义化标签 网页布局标签 -header 页首 -nav 导航栏 -aside 侧边栏 -main 主体 -section 区块 -airicle 文章 -footer 页尾 语义化标签 -mark 高亮显示 -summary（摘要）与detail（描述） 一般用于名词解释或用于封装一个区块 -meter 定义度量衡 ​ -属性：value 当前值 | min{number}最小值 |max{number}最大值|low与high{number} 指范围的最大最小 -progress 进度条 与meter属性用法一致 -dialog 定义对话框或窗口 -figure 用于对元素组合 （一般用来组合图片标题、图片与图片描述等）","categories":[{"name":"HTML5","slug":"HTML5","permalink":"http://example.com/categories/HTML5/"}],"tags":[]},{"title":"稳固CSS第二天（定位、BFC与IFC）","slug":"稳固CSS第二天（定位、BFC与IFC）","date":"2021-06-02T07:37:48.000Z","updated":"2021-06-02T07:40:45.076Z","comments":true,"path":"2021/06/02/稳固CSS第二天（定位、BFC与IFC）/","link":"","permalink":"http://example.com/2021/06/02/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%88%E5%AE%9A%E4%BD%8D%E3%80%81BFC%E4%B8%8EIFC%EF%BC%89/","excerpt":"定位 （position）设置元素在文档中的位置，会将标签（元素）转换为块级。定位分类 （属性值）​ -static 静态定位 默认值 没有定位 不能设置偏移值 占用标准流 ​ -relative 相对定位 占用标准流 可以通过偏移值改变其位置 相对自身所占位置做偏移","text":"定位 （position）设置元素在文档中的位置，会将标签（元素）转换为块级。定位分类 （属性值）​ -static 静态定位 默认值 没有定位 不能设置偏移值 占用标准流 ​ -relative 相对定位 占用标准流 可以通过偏移值改变其位置 相对自身所占位置做偏移 ​ -absolute 绝对定位 会脱离文档流 可以通过偏移值改变其位置 ​ 绝对定位一般与相对定位结合使用，它相对设置了relative定位的父级做偏移，如果没有父级开启相对定位，则相对body做偏移 ​ -fixed 固定定位 脱离文档流 相对于浏览器窗口左上角（0,0）做偏移，它与父级设不设定relative 没有关系 ​ 一般在开发中用来固定导航栏 z-index 仅能在定位元素上奏效​ 当多个元素添加绝对定位，元素将会叠加在一起，使用z-index可以设置元素显示的层次 普通流的z-index为0 FC （格式上下文）它是CSS2.1规范中的一个概念。它是页面中的一块渲染区域，并有一套渲染规则,它决定了其子元素将如何定位，以及和其他元素的关系与相互作用。分为：BFC与IFC BFC：块级格式上下文-形成BFC的条件​ -浮动元素（float除none以外的值） ​ -定位元素（值为absolute/fixed） ​ -display（值为inline-block/table-cell/table-caption） ​ -overflow（值为hidden/auto/scroll时） -BFC特性​ -内部的盒子会在垂直方向上一个接一个的位置 ​ -垂直方向上的距离由块级元素之间的margin最大值决定 如果不想要这个特性，就将其变成成一个独立的BFC容器 ​ -BFC的区域不会与float元素区域重叠 ​ （如果一个元素不想和float重叠 可以在样式内加入overflow：hidden，形成BFC，这样就不会重叠了） ​ -计算BFC高度时，浮动元素也参与计算 ​ （如果一个子元素浮动，没有元素来撑开父元素，可以使父元素变成BFC，这样父元素依然能被浮动的子元素撑开） ​ -BFC就是页面上一格独立的容器，容器里面的子元素不会影响到外面的元素 ​ -BFC的作用​ -解决margin重叠问题（添加独立BFC） ​ -解决高度塌陷问题（在父级元素中添加overflow：hidden） ​ -解决侵占浮动元素的问题（添加overflow：hidden清除浮动） IFC：内联（行级）格式上下文-形成IFC的条件​ -font-size ​ -line-height ​ -height ​ -vertical-align -IFC特性（规则）​ -IFC的元素会在一行中从左至右排列 ​ -在一行中的所有元素会在一个区域内形成一个行框 ​ -行宽的高度为包含框的高度，高度为行框中的最高元素 ​ -浮动的元素，不会在行框中，并且浮动元素会压缩行框的宽度 ​ -行框的宽度容纳不下子元素时，子元素会自动换到下一行，并且产生新的行框 ​ -行框内的元素遵循text-align和vertical-align ​ – height = line-height + vertical-align","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"定位、BFC、IFC","slug":"定位、BFC、IFC","permalink":"http://example.com/tags/%E5%AE%9A%E4%BD%8D%E3%80%81BFC%E3%80%81IFC/"}]},{"title":"稳固CSS第一天（table与列表样式）","slug":"稳固CSS第一天（table与列表样式）","date":"2021-06-01T14:02:58.000Z","updated":"2021-06-01T14:05:34.777Z","comments":true,"path":"2021/06/01/稳固CSS第一天（table与列表样式）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88table%E4%B8%8E%E5%88%97%E8%A1%A8%E6%A0%B7%E5%BC%8F%EF%BC%89/","excerpt":"table样式与列表样式table样式： table一般不用来布局，主要用来格式化数据-属性：​ width：宽度 ​ height：高度 ​ border-collapse：collapse；单线边框 ​ border：边框线 ​","text":"table样式与列表样式table样式： table一般不用来布局，主要用来格式化数据-属性：​ width：宽度 ​ height：高度 ​ border-collapse：collapse；单线边框 ​ border：边框线 ​ tr，td属性：​ width：宽度 ​ height：高度 ​ border：边框线 ​ text-align：文本左右对齐（left|center|right） ​ vertical-align：文本垂直对齐（top|botom|imddle 默认 ） ​ 列表样式： 不是描述性文本的任何内容都可以认为是列表。比如：菜单、商品列表等-1.列表类型​ 无序（ul）、有序（ol）、以及自定义列表（dl） ​ ul和ol的列表项都是由li表示的，而dl是由一个dt和一个或多个dd组成的 ​ dl一般用来设定一个定义，比如名词解释。dt（标题）; dd（描述）,用来对dt的内容进行解释并说明 -2.样式（用来修改标识类型）​ list-style-image：用图像标识标识 ​ list-style-position：标识的位置（inside|outside 默认 ） ​ list-style-type：标识类型 ​ 属性值： ​ a) 无序 disc（实心圆）|circle（空心圆）|square（实心矩形） ​ b) 有序 decimal（默认）|decimal-leading-zero|lower-roman|upper-roman|lower-alpha… ​ c）有序和无序 都有none 取消前面的标识 ​ 简写： list-style：list-style-image list-style-position list-style-type; 任意顺序，可以任意省略，只要提供一个值，其余值都会默认","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"样式","slug":"样式","permalink":"http://example.com/tags/%E6%A0%B7%E5%BC%8F/"}]},{"title":"稳固CSS第一天（盒子模型）","slug":"稳固CSS第一天（盒子模型）","date":"2021-06-01T14:02:42.000Z","updated":"2021-06-02T11:31:57.731Z","comments":true,"path":"2021/06/01/稳固CSS第一天（盒子模型）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%EF%BC%89/","excerpt":"CSS盒子模型每个元素都是一个盒子，一个盒子由margin（外边距），border（边框线），padding（内边框）和content（内容）组成","text":"CSS盒子模型每个元素都是一个盒子，一个盒子由margin（外边距），border（边框线），padding（内边框）和content（内容）组成 -margin 外边距​ 系统默认外边距为8px。 ​ -margin：可以用来设置任意一个边的边距，可以带1至4个参数。 ​ 一个：（a px）表示上下左右都为a px ​ 两个：（apx ，bpx）表示上下为apx，左右为bpx ​ 三个：（apx ，bpx ，cpx）表示上外边距为apx，左右为bpx，下为cpx ​ 四个： （apx ，bpx ，cpx， dpx） 依次为上 、右、 下、 左，顺时针 -padding 内边距 指元素的文本内容与边框之间的距离​ padding：用法与margin完全一样 -border 边框​ border-width：边框线宽度 ​ border-style：边框线样式 ​ border-color：边框线颜色 盒子的真实尺寸​ 盒子宽度 = width+padding左右+border左右 ​ 盒子高度 = height+padding上下+border上下 display属性：用来设置元素显示方式。​ 属性值： ​ none：不显示元素 ​ block：块显示，在元素前后设置换行符，目的：将行级元素转换为块级元素 ​ lnline：行内显示，将块级转换为行级 ​ inline-block：将块级或行级标签转换为行内块标签","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[]},{"title":"稳固CSS第一天（浮动）","slug":"稳固CSS第一天（浮动）","date":"2021-06-01T14:02:30.000Z","updated":"2021-06-01T14:03:55.464Z","comments":true,"path":"2021/06/01/稳固CSS第一天（浮动）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E6%B5%AE%E5%8A%A8%EF%BC%89/","excerpt":"什么是浮动？​ 浮动就是让块级标签不独占一行，使其脱离文档流，浮动的块级标签可以排成一行 ​ 浮动的原理：​ 就是让元素脱离文档流，不占用标准流。","text":"什么是浮动？​ 浮动就是让块级标签不独占一行，使其脱离文档流，浮动的块级标签可以排成一行 ​ 浮动的原理：​ 就是让元素脱离文档流，不占用标准流。 ​ float 属性值：left/right/none（默认值 不浮动） ​ 浮动后，后面的元素不管是块级元素还是行级元素，都会补足脱离文档流元素之前的空隙（空隙足够大的情况下）。 清除浮动：让后面的元素 不会来补足脱离文档流的元素之前的空隙​ 方法： ​ 1.添加空标签，并设置样式：clear：both; ​ clear-left; 清除左浮动 clear-清除右浮动 clear-both 清除左右浮动 ​ ​ 2.在要清除浮动的父级添加样式：overflow：hidden; ​ overflow-hidden 它的意思是超出部分隐藏，也可以用来实现清除浮动。 ​ ​ 3.在要清除浮动的父级添加伪元素，并设定样式： ​ 父元素:after{ ​ content:””; ​ display:block; ​ clear:both; ​ } ​ 注意，在实际项目开发中，我们首选第二种方法","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"浮动","slug":"浮动","permalink":"http://example.com/tags/%E6%B5%AE%E5%8A%A8/"}]},{"title":"稳固CSS第一天（CSS样式）","slug":"稳固CSS第一天（CSS样式）","date":"2021-06-01T09:23:14.000Z","updated":"2021-06-01T09:28:54.264Z","comments":true,"path":"2021/06/01/稳固CSS第一天（CSS样式）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88CSS%E6%A0%B7%E5%BC%8F%EF%BC%89/","excerpt":"CSS样式样式权重：​ !important（10000）&gt;内联样式（1000）&gt;id选择器（100）&gt;类、伪类选择器（10）&gt;标签选择器（1） CSS字体属性：​ 1.font-size：字号 ​ 属性值：&#123;number+px&#125; 固定值尺寸像素 / &#123;number+%&#125; 其百分比取值是基于父对象中字体尺寸大小 ​ 2.font-family：字体 ​ 属性值：name 字体名称，按优先顺序排列，以逗号隔开，如果字体包含空格，则应使用引号包裹 ​ 如果浏览器都识别不了，浏览器会给它添加默认的字体","text":"CSS样式样式权重：​ !important（10000）&gt;内联样式（1000）&gt;id选择器（100）&gt;类、伪类选择器（10）&gt;标签选择器（1） CSS字体属性：​ 1.font-size：字号 ​ 属性值：&#123;number+px&#125; 固定值尺寸像素 / &#123;number+%&#125; 其百分比取值是基于父对象中字体尺寸大小 ​ 2.font-family：字体 ​ 属性值：name 字体名称，按优先顺序排列，以逗号隔开，如果字体包含空格，则应使用引号包裹 ​ 如果浏览器都识别不了，浏览器会给它添加默认的字体 ​ 3.font-style：样式 ​ 属性值：normal 默认值 正常字体 ​ italic：斜体，对于没有斜体变量的特殊字体，将应用oblique ​ oblique: 倾斜的字体 ​ 4.font-weight：加粗 ​ 属性值：normal 默认值 ​ bold 粗体 ​ bolder 比bold粗 ​ lighter 比normal细 ​ {100-900} 400约为normal 700约为bold ​ ​ 5.line-height：行高 ​ 属性值：normol 默认值 ​ {number+px} 指定行高像素 ​ {number} 指定行高为字体倍数 ​ 6.color：文字的颜色 ​ 属性值：name 颜色名称指定color ​ rgb 指定颜色为RGB值 ​ { 颜色16进制} 指定颜色为16进制 ​ 7.text-decoration：文字的修饰 ​ 属性值：normal 默认值 ​ underline 下划线 ​ line-through 贯穿线 ​ overline 上划线 ​ 8.text-align：文本对齐方式 ​ 属性值：left 默认值 ​ center 居中对齐 ​ right 右对齐 ​ 9.text-transform：字母大小写 ​ 属性值：none 默认值 无转换发生 ​ capitalize 将每个单词的第一个字母转换为大写 ​ uppercase 所有字母转换为大写 ​ lowercase 所有字母转换为小写 ​ 10.text-indent：文本缩进 ​ 属性值：{number+px} 首行缩进number像素 ​ {number+em} 首行缩进number字符 跟文字大小来确定 ​ ​ 11.font-variant ​ 属性值：normal 默认值 ​ small-caps 浏览器会显示小型的大写字母字体 ​ inherit 规定从父元素继承font-variant的值 font的复合属性​ 次序：font-style font-variant font-weight font-size/line-height font-family； ​ 注意： ​ 1) 属性值的位置顺序 ​ 2) 除了font-size和font-family之外，其它任何一个值都可以省略 CSS背景：​ 1.background-color：背景色（transparent/color） ​ 2.background-image：背景图（none/url） ​ 3.background-repeat：背景图像铺排方式（repeat/no-repeat/repeat-x/repeat-y） ​ 4.background-position: 设置对象的背景图像位置 两个参数 ​ {x-number|top|center|bottom} {y-number|left|center|right} 如果只带一个参数，默认另一个为50% ​ 5.background-attachment：设置对象背景滚动位置（scroll/fixed） ​ 6.background:设置背景的符合写法 ​ 次序为：color image repeat attachment position","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"样式","slug":"样式","permalink":"http://example.com/tags/%E6%A0%B7%E5%BC%8F/"}]},{"title":"稳固CSS第一天（伪类与伪元素）","slug":"稳固CSS第一天（伪类与伪元素）","date":"2021-06-01T09:07:53.000Z","updated":"2021-06-01T09:11:24.682Z","comments":true,"path":"2021/06/01/稳固CSS第一天（伪类与伪元素）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0%EF%BC%89/","excerpt":"CSS伪元素CSS伪元素与伪类的区别​ CSS引入伪元素和伪类概念是为了格式化文档以外的信息。也就是说伪类和伪元素是用来修饰不在文档树中的部分 ​ 伪类：用于当已有元素处于某个状态，为其添加对应样式，这个样式是根据用户行为而动态变化的。它只有处于dom文档树 ​ 无法描述的状态下才能为其添加样式，所以将其称为伪类。 ​ 伪元素：用于创建一些不在文档树中的元素，并为其添加样式。用户虽然可以看到文本，但文本实际不存在文档树中。","text":"CSS伪元素CSS伪元素与伪类的区别​ CSS引入伪元素和伪类概念是为了格式化文档以外的信息。也就是说伪类和伪元素是用来修饰不在文档树中的部分 ​ 伪类：用于当已有元素处于某个状态，为其添加对应样式，这个样式是根据用户行为而动态变化的。它只有处于dom文档树 ​ 无法描述的状态下才能为其添加样式，所以将其称为伪类。 ​ 伪元素：用于创建一些不在文档树中的元素，并为其添加样式。用户虽然可以看到文本，但文本实际不存在文档树中。 伪类与伪元素的特点：​ -伪元素和伪类都不会出现在源文档或者文档树中 ​ -伪元素允许出现在选择器的任何位置，而一个伪元素只能跟在最后一个简单选择器后面 ​ -伪类名和伪元素名都是对大小写不敏感的 ​ -有些伪类互斥，而不互斥的可以用在同一个元素上 伪元素注意的点：​ :before/:after/:first-letter（第一个字）/first-line（第一行） 这些前面可以是一个冒号 也可以是双冒号 ​ ::selection/::placeholder/::backdrop 这些前面只能是双冒号","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"伪类与伪元素","slug":"伪类与伪元素","permalink":"http://example.com/tags/%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0/"}]},{"title":"稳固CSS第一天（CSS选择器）","slug":"稳固CSS第一天（CSS选择器）","date":"2021-06-01T09:07:28.000Z","updated":"2021-06-02T11:36:28.639Z","comments":true,"path":"2021/06/01/稳固CSS第一天（CSS选择器）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88CSS%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%89/","excerpt":"CSS选择器CSS选择器分类：​ 1) * ：匹配HTML中所有元素（注意：*性能差，因为他要匹配所有元素） ​ 2) 标签选择器 ：匹配对应标签 ​ 3) 类选择器 ：选择class命名的标签 ​ 4) ID选择器 ：选择用id命名的标签 ​ 5) 派出选择器 ：根据上下文来确定要选择的标签","text":"CSS选择器CSS选择器分类：​ 1) * ：匹配HTML中所有元素（注意：*性能差，因为他要匹配所有元素） ​ 2) 标签选择器 ：匹配对应标签 ​ 3) 类选择器 ：选择class命名的标签 ​ 4) ID选择器 ：选择用id命名的标签 ​ 5) 派出选择器 ：根据上下文来确定要选择的标签 ​ 6) 伪类选择器 ： ​ 伪类：专门用来表示元素一种的特殊状态。 ​ 常用的伪类选择器： ​ -a标签的伪类： ​ –:link 未访问状态 ​ –:visited 已被访问状态 ​ –:hover 鼠标悬停状态 ​ –:active 用户激活 ​ ​ -表单 :focus 获得焦点 ​ -:first-child/:last-child/:nth-child(number) ​ 7) 属性选择器： ​ [属性名]：包含有指定属性名的元素 （常用） ​ [属性名=值]：属性名的值 为指定值的元素 （常用） ​ [属性名~=值]：属性名的值 包含指定值的元素 ​ [属性名^=值]：属性名的值 以指定值开头的元素 ​ [属性名&amp;=值]：属性名的值 以指定值结尾的元素 ​ 8) 关系选择器 ​ -空格 后代选择器 ​ -&gt; 表示只选择儿子元素，孙子等元素不参与选择 ​ -+ 兄弟选择器 CSS选择器的分组：​ 让多个选择器（元素）具有相同样式，一般用于设置公共样式 CSS选择器的继承：​ 子元素可以继承父元素的样式，反之不行","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"选择器","slug":"选择器","permalink":"http://example.com/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"}]},{"title":"稳固CSS第一天（CSS引用方式）","slug":"稳固CSS第一天（CSS引用方式）","date":"2021-06-01T09:07:09.000Z","updated":"2021-06-01T09:09:00.684Z","comments":true,"path":"2021/06/01/稳固CSS第一天（CSS引用方式）/","link":"","permalink":"http://example.com/2021/06/01/%E7%A8%B3%E5%9B%BACSS%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88CSS%E5%BC%95%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%89/","excerpt":"CSS层叠样式表，用来美化网页。做到结构（HTML）和表现（CSS）分离 ​ 基本语法：选择器 { ​ 属性: 属性值; ​ } ​ CSS引用方式 ： 行间样式、内部样式、外部样式、导入外部样式。​","text":"CSS层叠样式表，用来美化网页。做到结构（HTML）和表现（CSS）分离 ​ 基本语法：选择器 { ​ 属性: 属性值; ​ } ​ CSS引用方式 ： 行间样式、内部样式、外部样式、导入外部样式。​ ​ 行间样式：直接在标签书写样式 ​ 内部样式：在文件的内部书写样式 ​ 外部样式：先创建CSS文件，再用link标签引入这个文件 ​ 导入外部样式： 先创建CSS文件 ，在再style标签中用import导入这个样式文件 ​ ​ 以上四种引入方式的区别是：行内样式只作用于当前标签；内部样式作用于当前文件；外部样式可以被多个HTML文件引用 ​ 在实际开发中，最好使用外部样式。 外部样式分为link和import引入方式，区别是​ 1.link是XHTML标签，除了加载css外，还可以定义RSS等其他事务；@import属于css范畴，只能加载css ​ 2.link引入css时，在页面载入时同时加载；而@import需要页面网页完全载入以后加载 ​ 3.link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持 ​ 4.link支持使用javascript控制DOM去改变样式；而@import不支持","categories":[{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"}],"tags":[{"name":"引用","slug":"引用","permalink":"http://example.com/tags/%E5%BC%95%E7%94%A8/"}]},{"title":"稳固HTML第一天（from与iframe）","slug":"稳固HTML第一天（from与iframe）","date":"2021-05-31T15:00:00.000Z","updated":"2021-05-31T15:14:17.288Z","comments":true,"path":"2021/05/31/稳固HTML第一天（from与iframe）/","link":"","permalink":"http://example.com/2021/05/31/%E7%A8%B3%E5%9B%BAHTML%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88from%E4%B8%8Eiframe%EF%BC%89/","excerpt":"From 元素及分类from 表单标签是所有标签最核心的标签之一。它是用来实现前后端交互的一个重要标签 ​ 常用属性 ​ name 表单名称 ​ action 表单数据提交地方 通常是一个后台文件名或者网址 如果是# 则是提交到当前文件下 ​ method 前端提交数据到后端的方法，主要有get和post，默认的是get ，get会带值，post不带","text":"From 元素及分类from 表单标签是所有标签最核心的标签之一。它是用来实现前后端交互的一个重要标签 ​ 常用属性 ​ name 表单名称 ​ action 表单数据提交地方 通常是一个后台文件名或者网址 如果是# 则是提交到当前文件下 ​ method 前端提交数据到后端的方法，主要有get和post，默认的是get ，get会带值，post不带 表单元素分为：input类​ 主要用来完成输入、选择或发出指令。 ​ type：text/password/radio/checkbox/file/button/image/submit/reset text:单行文本输入框 默认值​ 属性：placeholder（提示）/ name（命名）/minlength（最少输入字符个数）/maxlength(最多输入字符个数) ​ disabled（失效）/readonly（只读）/value (默认值)/pattern (正则) ​ password：密码框 属性与text一样 rodio：单选框，通常属性是两项以上。​ 属性：name（必须要有）/value/check（选中）/disabled（失效）/readonly（只读） checkbox：复选框，可以用来选择0项、1项或多项。​ 属性：name（必须要有）/value/check（默认选中）/disabled（失效）/readonly（只读） file：文件上传按钮button：普通按钮，通常用它去调用脚本代码。​ 属性：value(按钮标题)/disabled（失效） ​ image：图片按钮，用法与button一样。有个特殊属性：src（用来加载提示图片，用它替换了value）​ 它也有提交功能，和submit功能一样 submit：提交按钮，用来将表单数据提交到后台​ 属性：value(按钮标题)/disabled（失效） reset：重置按钮，将表单所有组件输入的内容全部清空，还原为初始状态​ 属性：value(按钮标题)/disabled（失效） textarea类​ 文本域（也叫多行文本框），主要用来输入大批量内容 ​ 常用属性：name/id/clos(列数)/rows（行数）/placeholder/minlength/maxlength/required(必须输入)/value select类​ 下拉列表框，默认用于单项选择， ​ 属性：用option呈现每个选项 /multiple 表示可以多选 下拉列表框变成列表框 /size 最多显示行数 button类​ 写在from表单中的和input类里的作用一样 都是提交表单内的数据 ，写在外面的button 可以加入js逻辑来使用 iframe 框架集 iframe:框架集 用来将多个网页文件组合成一个文件 ​ 属性： ​ name:框架名 ​ src：引入的外部html文件 ​ scrolling：滚动条（yes/no/auto） ​ width：设置宽度 ​ height：设置高度 ​ frameboder：是否有边框（0/1） ​ marginheight：框架离顶部或底部的距离 ​ marginwidth：框架离左边或右边的距离、 注意：在实际开发中尽量少用iframe，因为它破坏了前进和后退功能，且不利于SEO","categories":[{"name":"HTML","slug":"HTML","permalink":"http://example.com/categories/HTML/"}],"tags":[{"name":"from","slug":"from","permalink":"http://example.com/tags/from/"}]},{"title":"稳固HTML第一天（表格）","slug":"稳固HTML第一天（表格）","date":"2021-05-31T14:59:32.000Z","updated":"2021-05-31T15:26:24.924Z","comments":true,"path":"2021/05/31/稳固HTML第一天（表格）/","link":"","permalink":"http://example.com/2021/05/31/%E7%A8%B3%E5%9B%BAHTML%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E8%A1%A8%E6%A0%BC%EF%BC%89/","excerpt":"表格1.1绘制基本表格","text":"表格1.1绘制基本表格 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- table 表格 主要用于呈现格式化数据 表格是由行和列组成 格式： &lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; 表头 主要对下面内容起说明作用 th的内容会自动加粗和居中显示 &lt;td&gt;&lt;/td&gt; ....... &lt;/tr&gt; ..... &lt;/table&gt; table+tr*2&gt;td&#123;内容$&#125;*3 表格属性： 1.boder 设置表格边框 默认单位是像素 2.width 设置表格宽度 默认单位是像素 3.align 设置表格对齐 left（默认）/center/right 4.cellpadding 设置单元格间距 5.cellspacing 设置像素间隙 --&gt; &lt;table border=&quot;1&quot; width=&quot;400&quot; cellspacing=&quot;0&quot; cellpadding=&quot;10&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;th&gt;学号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;住址&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;007&lt;/td&gt; &lt;td&gt;张三&lt;/td&gt; &lt;td&gt;岳阳&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;008&lt;/td&gt; &lt;td&gt;李四&lt;/td&gt; &lt;td&gt;长沙&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt; 1.2 跨行/跨列12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 跨行/跨列属性主要用来绘制复杂表格 rowspan：跨行 colspan：跨列 --&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot; align=&quot;center&quot; valign=&quot;bottom&quot;&gt;内容区01&lt;/td&gt; &lt;!-- valign:垂直对齐（top/middle/bottom） --&gt; &lt;td&gt;内容区02&lt;/td&gt; &lt;td rowspan=&quot;3&quot;&gt;内容区03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;!-- &lt;td&gt;内容区01&lt;/td&gt; --&gt; &lt;td&gt;内容区02&lt;/td&gt; &lt;!-- &lt;td&gt;内容区03&lt;/td&gt; --&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容区01&lt;/td&gt; &lt;td&gt;内容区02&lt;/td&gt; &lt;!-- &lt;td&gt;内容区03&lt;/td&gt; --&gt; &lt;/tr&gt; &lt;/table&gt;&gt; &lt;table border=&quot;1&quot; width=&quot;500&quot; align=&quot;center&quot;&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;内容区01&lt;/td&gt; &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;内容区02&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容区02&lt;/td&gt; &lt;td&gt;内容区03&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;3&quot; align=&quot;right&quot;&gt;内容区01&amp;nbsp;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&gt;&lt;/body&gt;&lt;/html&gt; 1.3 完整表单组成12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;完整表格&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 完整表格组成 ：caption（标题）、thead（表头）、tbody（表体）、tfoot（表尾）四部分组成 --&gt; &lt;table border=&quot;1&quot; width=&quot;600&quot; align=&quot;center&quot;&gt; &lt;caption&gt;学生信息表&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;学号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;家庭住址&lt;/th&gt; &lt;th&gt;备注&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td align=&quot;center&quot;&gt;001&lt;/td&gt; &lt;td&gt;TOM*&lt;/td&gt; &lt;td&gt;长沙&lt;/td&gt; &lt;td&gt;0000000&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=&quot;center&quot;&gt;002&lt;/td&gt; &lt;td&gt;CAT&lt;/td&gt; &lt;td&gt;岳阳&lt;/td&gt; &lt;td&gt;11111111&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td align=&quot;center&quot;&gt;003&lt;/td&gt; &lt;td&gt;Mouse&lt;/td&gt; &lt;td&gt;北京&lt;/td&gt; &lt;td&gt;222222222&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td colspan=&quot;4&quot;&gt;附注：*为优秀学生&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"HTML","slug":"HTML","permalink":"http://example.com/categories/HTML/"}],"tags":[{"name":"表格","slug":"表格","permalink":"http://example.com/tags/%E8%A1%A8%E6%A0%BC/"}]},{"title":"稳固HTML第一天（标签的属性）","slug":"稳固HTML第一天（标签的属性）","date":"2021-05-31T14:59:06.000Z","updated":"2021-05-31T15:14:47.650Z","comments":true,"path":"2021/05/31/稳固HTML第一天（标签的属性）/","link":"","permalink":"http://example.com/2021/05/31/%E7%A8%B3%E5%9B%BAHTML%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E6%A0%87%E7%AD%BE%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%89/","excerpt":"标签的属性 标签属性： ​ –1.通常由属性名 = “属性值” 组成 ​ –2.起一个附加信息的作用 ​ –3.不是所有标签都有属性，如：br","text":"标签的属性 标签属性： ​ –1.通常由属性名 = “属性值” 组成 ​ –2.起一个附加信息的作用 ​ –3.不是所有标签都有属性，如：br 文本格式化标签123456789101112&lt;!-- 文本格式化标签：就是通过标签来美化文本外观 --&gt;&lt;!-- 1.b和strong：不会自动换行 都有加粗作用 但是strong还有强调作用。注：强调主要用于SEO时，便于提取关键字。 --&gt;&lt;!-- 2.i和em：不会自动换行 使文字倾斜，em具有强调作用 --&gt;&lt;!-- pre：预格式化文本：块级标签 被pre标签包裹的文字 保留换行和空格及宽度，文字的字号会小一号。 --&gt;&lt;!--small和big：行内标签 分别让文字缩小或放大一号。注：big在HTML5中淘汰了，但没有删除，在开发中尽量还是不要使用淘汰的标签--&gt;&lt;!-- 浏览器支持的最小字号为12px，如果要显示比12px还小的文字效果，需要去另做处理 --&gt;&lt;!--sub和sup：设置文字为上标和小标，用来调整文本正常显示的基线，且文字会自动小一号 --&gt; 实体转义符12345678910&lt;!-- 实体转义的特点是&amp;开头 ;结尾 --&gt;&lt;!-- &amp;it; &lt; &amp;gt; &gt; &amp;amp; &amp; &amp;nbsp; 空格 &amp;copy; 版权© &amp;times; 乘号× &amp;divide; 除号÷ --&gt; 块级元素与行内元素1234567891011&lt;!-- 块级元素：相当于执行了display：block；操作 独占一行 宽度和高度是可控的，如果没有设置其高度，将默认铺满整行 块级元素可以包含块级和行级标签 --&gt;&lt;!-- 行级元素：相当于执行了display：inline；操作 不会独占一行 与相邻的行级元素 占同一行，直到行占满，会自动掉到下一行 高度和宽度是不可控的 其内只能包含行级元素 --&gt; W3C规范 W3C标准由结构、表现、形为三部分组成。 1.标签嵌套规则，块级元素可以包含块级元素和内联元素 ，内联元素只能包含内联元素。 2.块级元素不能放在p标签里。 3.有几个特殊的块级标签不能包含块级元素,如:hx(1-6),p,dt。 4.块级元素与块级元素并列,内嵌元素与内嵌元素并列 语义化标签123456789101112&lt;!-- 语义化标签 ：通俗点说，明白每个标签的用途 1.更容易被搜索引擎收录 2.更容易让屏幕阅读器读出网页内容 3.能更好的体现主题页面 4.兼容性更好，支持更多的网络设备。 --&gt;&lt;!-- 1.a： 超链接本文 title强调 2.q： 短文本引用 浏览器解析后 自动加引号 3.address： 加入地址信息时 用它包裹 4.caption：为表格添加标题和摘要 --&gt; 通用标签属性1234567891011121314151617&lt;!-- 标签由标签名、标签属性、文本内容三部分组成（注意：单标签没有文本内容） --&gt;&lt;!-- 标签属性 是对一种标签的描述方式 1.通用属性 2.自有属性 3.用户自定义属性--&gt;&lt;!-- 通用属性：所有标签都具有的属性 1.id 用来给标签取一个唯一的名称 2.class 用来给标签取一个类名 3.style 用来设置标签的行内样式 4.title 当鼠标移到改标签，所显示的内容--&gt;&lt;!-- 自定义属性 通常用来传值或图片的懒加载等方面 格式：data-* --&gt;","categories":[{"name":"HTML","slug":"HTML","permalink":"http://example.com/categories/HTML/"}],"tags":[{"name":"标签","slug":"标签","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE/"}]},{"title":"稳固HTML第一天（基本标签属性）","slug":"稳固HTML第一天（基本标签属性）","date":"2021-05-31T07:54:06.000Z","updated":"2021-05-31T14:57:28.508Z","comments":true,"path":"2021/05/31/稳固HTML第一天（基本标签属性）/","link":"","permalink":"http://example.com/2021/05/31/%E7%A8%B3%E5%9B%BAHTML%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E5%9F%BA%E6%9C%AC%E6%A0%87%E7%AD%BE%E5%B1%9E%E6%80%A7%EF%BC%89/","excerpt":"稳固 HTML 第一天HTML 基本标签的学习","text":"稳固 HTML 第一天HTML 基本标签的学习 3.1 基本标签 1234567891011121314151617181920212223242526272829303132333435&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 1.div 没有具体含义 . 层 --&gt; &lt;!-- 2.hx:标题 1-6级 1级最大 6级最小 会自动加粗 有默认字号 --&gt; &lt;!-- 3.p:表示段落 相当于一个回车 --&gt; &lt;!-- 4.br：实现换行 单标签--&gt; &lt;!-- 5.hr：生成一条水平线 主要起一个装饰作用 单标签 --&gt; &lt;!-- 6.a：用来设置超链接文本 实现连接跳转 属性：1.target：_blank 打开新窗口 _self 当前窗口打开 --&gt; &lt;!-- 7.img：用来加载外部图片、图像 属性：src：设定加载图片、图像路径 alt：当图片加载不出来时，将显示其内容 title：鼠标移到图片上时的提示文字 --&gt; &lt;!-- 8.span：作用于div一样 都是用来布局的 不同的是 div是单独占一行 span不会 属于行内布局 --&gt; &lt;!-- 9.ul与ol：列表，前者是无序列表，后者为无序列表，他们的列表内容用的都是li标签 --&gt;&lt;/body&gt;&lt;/html&gt; 3.2 标签的属性 标签属性： ​ –1.通常由属性名 = “属性值” 组成 ​ –2.起一个附加信息的作用 ​ –3.不是所有标签都有属性，如：br 3.3 文本格式化标签 123456789101112&lt;!-- 文本格式化标签：就是通过标签来美化文本外观 --&gt;&lt;!-- 1.b和strong：不会自动换行 都有加粗作用 但是strong还有强调作用。注：强调主要用于SEO时，便于提取关键字。 --&gt;&lt;!-- 2.i和em：不会自动换行 使文字倾斜，em具有强调作用 --&gt;&lt;!-- pre：预格式化文本：块级标签 被pre标签包裹的文字 保留换行和空格及宽度，文字的字号会小一号。 --&gt;&lt;!--small和big：行内标签 分别让文字缩小或放大一号。注：big在HTML5中淘汰了，但没有删除，在开发中尽量还是不要使用淘汰的标签--&gt;&lt;!-- 浏览器支持的最小字号为12px，如果要显示比12px还小的文字效果，需要去另做处理 --&gt;&lt;!--sub和sup：设置文字为上标和小标，用来调整文本正常显示的基线，且文字会自动小一号 --&gt; 3.4 实体转义符 12345678910&lt;!-- 实体转义的特点是&amp;开头 ;结尾 --&gt;&lt;!-- &amp;it; &lt; &amp;gt; &gt; &amp;amp; &amp; &amp;nbsp; 空格 &amp;copy; 版权© &amp;times; 乘号× &amp;divide; 除号÷ --&gt; 3.5 块级元素与行内元素 1234567891011&lt;!-- 块级元素：相当于执行了display：block；操作 独占一行 宽度和高度是可控的，如果没有设置其高度，将默认铺满整行 块级元素可以包含块级和行级标签 --&gt;&lt;!-- 行级元素：相当于执行了display：inline；操作 不会独占一行 与相邻的行级元素 占同一行，直到行占满，会自动掉到下一行 高度和宽度是不可控的 其内只能包含行级元素 --&gt; 3.6 W3C规范 W3C标准由结构、表现、形为三部分组成。 1.标签嵌套规则，块级元素可以包含块级元素和内联元素 ，内联元素只能包含内联元素。 2.块级元素不能放在p标签里。 3.有几个特殊的块级标签不能包含块级元素,如:hx(1-6),p,dt。 4.块级元素与块级元素并列,内嵌元素与内嵌元素并列 3.7 语义化标签 123456789101112&lt;!-- 语义化标签 ：通俗点说，明白每个标签的用途 1.更容易被搜索引擎收录 2.更容易让屏幕阅读器读出网页内容 3.能更好的体现主题页面 4.兼容性更好，支持更多的网络设备。 --&gt;&lt;!-- 1.a： 超链接本文 title强调 2.q： 短文本引用 浏览器解析后 自动加引号 3.address： 加入地址信息时 用它包裹 4.caption：为表格添加标题和摘要 --&gt;","categories":[{"name":"HTML","slug":"HTML","permalink":"http://example.com/categories/HTML/"}],"tags":[{"name":"标签","slug":"标签","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE/"}]},{"title":"稳固HTML第一天（页面初始化分析）","slug":"稳固HTML第一天（页面初始化分析）","date":"2021-05-31T04:43:11.000Z","updated":"2021-05-31T14:57:35.958Z","comments":true,"path":"2021/05/31/稳固HTML第一天（页面初始化分析）/","link":"","permalink":"http://example.com/2021/05/31/%E7%A8%B3%E5%9B%BAHTML%E7%AC%AC%E4%B8%80%E5%A4%A9%EF%BC%88%E9%A1%B5%E9%9D%A2%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%86%E6%9E%90%EF%BC%89/","excerpt":"HTML页面1.HTML 超文本标记语言。它是一种标志性语言，非编程语言，不能使用逻辑运算。通过标签将网上的文档格式进行统一，使分散的网络资源链接为一个逻辑整体。 1.1 超文本：是一种组织信息方式，通过超级链接将多种媒介关联起来。 1.2 标记： 标签，用&lt; &gt;包裹的具有一定含义的内容。 2.HTML页面初始化分析","text":"HTML页面1.HTML 超文本标记语言。它是一种标志性语言，非编程语言，不能使用逻辑运算。通过标签将网上的文档格式进行统一，使分散的网络资源链接为一个逻辑整体。 1.1 超文本：是一种组织信息方式，通过超级链接将多种媒介关联起来。 1.2 标记： 标签，用&lt; &gt;包裹的具有一定含义的内容。 2.HTML页面初始化分析 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;!DOCTYPE html&gt;&lt;!--申明 下面的代码将由HTML5规范去解析--&gt;&lt;html lang=&quot;en&quot;&gt;&lt;!-- lang : language 语言 en：English 这里表达的是这个页面是英文页面 zh：为中文页面--&gt;&lt;head&gt; &lt;!-- 头部标签，主要用来完成一个网页的相关设置--&gt; &lt;!-- meta 元，主要用于完成对应设置--&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;!--设置汉字编码--&gt; &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt;&lt;!-- content内填写网页的搜索关键字--&gt; &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;&lt;!--content内填写网站的描述内容--&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;!-- 这里是针对IE8 进行特别的渲染设置 避免IE8出错--&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;!-- viewport 显示器显示网页的大小 content属性 --width 和height 指令分别指定视区的逻辑宽度和高度。它们的值可以是以像素为单位的数字，也可以是一个特殊的标记符号 --initial-scale用于设置Web页面的初始缩放比例。设为1.0则显示未经缩放的Web页面 --maximum-scale和minimum-scale用于设置用户对于Web页面缩放比例的限制。值的范围为0.25~10.0之间 --user-scalable指定用户是否可以缩放视区，即缩放Web页面的视图。值为yes时允许用户进行缩放，值为no时不允许缩放 在scale为1的情况下，device-width = 设备的物理分辨率/devicePixelRatio --&gt; &lt;title&gt;Document&lt;/title&gt;&lt;!--标题 --&gt; &lt;link rel=&quot;shortcut icon&quot; href=&quot;图片链接&quot; type=&quot;image/图片格式&quot;&gt;&lt;!-- 设置网站小图标 --&gt; &lt;style&gt; /* 书写页面样式 */ &lt;/style&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;&lt;!-- 用来引入外部样式文件--&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- 主题部分--&gt; &lt;/body&gt;&lt;script&gt; // 书写脚本语言&lt;/script&gt;&lt;/html&gt;","categories":[{"name":"HTML","slug":"HTML","permalink":"http://example.com/categories/HTML/"}],"tags":[{"name":"页面","slug":"页面","permalink":"http://example.com/tags/%E9%A1%B5%E9%9D%A2/"}]}],"categories":[{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"},{"name":"CSS3","slug":"CSS3","permalink":"http://example.com/categories/CSS3/"},{"name":"HTML5","slug":"HTML5","permalink":"http://example.com/categories/HTML5/"},{"name":"CSS","slug":"CSS","permalink":"http://example.com/categories/CSS/"},{"name":"HTML","slug":"HTML","permalink":"http://example.com/categories/HTML/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://example.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"},{"name":"HTML、CSS","slug":"HTML、CSS","permalink":"http://example.com/tags/HTML%E3%80%81CSS/"},{"name":"背景 颜色 渐变 盒模型","slug":"背景-颜色-渐变-盒模型","permalink":"http://example.com/tags/%E8%83%8C%E6%99%AF-%E9%A2%9C%E8%89%B2-%E6%B8%90%E5%8F%98-%E7%9B%92%E6%A8%A1%E5%9E%8B/"},{"name":"文本 边框","slug":"文本-边框","permalink":"http://example.com/tags/%E6%96%87%E6%9C%AC-%E8%BE%B9%E6%A1%86/"},{"name":"新特性","slug":"新特性","permalink":"http://example.com/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"},{"name":"多媒体与画布","slug":"多媒体与画布","permalink":"http://example.com/tags/%E5%A4%9A%E5%AA%92%E4%BD%93%E4%B8%8E%E7%94%BB%E5%B8%83/"},{"name":"定位、BFC、IFC","slug":"定位、BFC、IFC","permalink":"http://example.com/tags/%E5%AE%9A%E4%BD%8D%E3%80%81BFC%E3%80%81IFC/"},{"name":"样式","slug":"样式","permalink":"http://example.com/tags/%E6%A0%B7%E5%BC%8F/"},{"name":"浮动","slug":"浮动","permalink":"http://example.com/tags/%E6%B5%AE%E5%8A%A8/"},{"name":"伪类与伪元素","slug":"伪类与伪元素","permalink":"http://example.com/tags/%E4%BC%AA%E7%B1%BB%E4%B8%8E%E4%BC%AA%E5%85%83%E7%B4%A0/"},{"name":"选择器","slug":"选择器","permalink":"http://example.com/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"},{"name":"引用","slug":"引用","permalink":"http://example.com/tags/%E5%BC%95%E7%94%A8/"},{"name":"from","slug":"from","permalink":"http://example.com/tags/from/"},{"name":"表格","slug":"表格","permalink":"http://example.com/tags/%E8%A1%A8%E6%A0%BC/"},{"name":"标签","slug":"标签","permalink":"http://example.com/tags/%E6%A0%87%E7%AD%BE/"},{"name":"页面","slug":"页面","permalink":"http://example.com/tags/%E9%A1%B5%E9%9D%A2/"}]}